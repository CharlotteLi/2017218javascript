### cookie和session；
#### cookie =》 cookie-parser模块
- http协议是一个无状态的协议，在浏览器同一个域名的不同页面，需要重复的登录，因为服务器不认识你；
- cookie的缺点：
    - cookie是不加密的，用户可以自由看到
    - cookie可以被删除和禁用
- 设置：res.cookie(名字，值，{maxAge:存活时间，httpOnly:true})
- 获取：req.cookies.名字
- cookie的存活时间是毫秒数；比如30天= 30*24*60*60*1000;
#### session =》 express-session模块
```
//中间件
app.use(session({
    secret: 'keyboard cat',
    resave: false,
    saveUninitialized: true,
    /*cookie: { secure: true } *// 注意：针对https
}))
```
```
//设置session
req.session.xxxx=xxx;
//获取session
req.session.xxxx
```
#### cookie和session的区别：
- cookie是明码，session是乱码
- cookie存在浏览器端； session存在服务器端
- cookie内存小4； session内存大的去了；
### mongodb
-  安装mongodb，把路径配制成全局环境变量；
-  安装mongovue;
-  配置数据库的存储引擎，只需要配置一次；
`mongod  --storageEngine mmapv1 --dbpath 任意存放数据的目录`;
- mongodb的结构
    mongodb-》好多数据库=>每个数据库中有好多集合=》每个集合中有好多document(文档数据格式：json)
### mongodb的常用shell命令
- 开机：`mongod --dbpath 数据库的目录地址`
- 创建mongo数据库运行环境:
    + 新建一个cmd
    + 输入: mongo+回车
- 清屏：cls
- 查看mongo中有多少数据库：show dbs
- 新建数据库和使用数据库： use 数据库的名称
    + 但是，如果是新建的数据库，但没有数据，数据库也不到；
- 插入数据和创建集合是同步的；
    + 如果这个集合不存在的话，在插入数据的过程中就会自动创建集合；
- 查看当前所在的数据库：db
- 查看有多少条数据 `db.集合.find()`;
### 关于mongo的shell命令的增删改查；
- 增加：
    + 一条一条的增加；
        + db.jihe.insert({})
    + 批量导入来增加
        + mongoimport --db 数据库 --collection 集合 --drop --file 要导入的数据的地址；
- 查询：
    1. 查到所有数据：db.jihe.find()  ||  db.jihe.find({})
    2. 查到指定的数据：db.jihe.find({"name":"赵敏"})
        + find 可以找到所有符合条件的数据；
    3. 查找一条数据 findOne()
    4. 利用操作符，找符合条件的数据
            + db.jihe.find({"age":{$gt:18}})
            + db.jihe.find({"age":{$lt:18}})
    5.  查找可以进行"排序"： db.jihe.find().sort({"age":1})
            + 1:正向排序
            + -1：反向排序
    6.  查找总共有多少条数据 db.jihe.find().count()

    7. 可以实现分页查询：
        db.jihe.find().limit(每页显示的条数).skip(跳过多少条)
- 更新
    1. 拿新数据彻底覆盖前面的找到的数据
        + db.update(json1,json2);
    2. 只更改，不覆盖；
        + db.update(json1,{$set:json2}); 它默认改的只有一条；
        + db.update(json1,{$set:json2},{multi:true});
- 删除
    1. 删除一条
        + db.student.remove(json1,{justOne:true});
    2. 删除所有符合条件的
        +  db.student.remove(json1)
    3. 删除所有数据doc
        + db.student.remove({}) //删除当前集合下的所有数据，但是集合还在；
    4. 删除student集合
        + db.student.drop() //删除student集合
    5. 删除数据库
        + db.dropDatabase()

















